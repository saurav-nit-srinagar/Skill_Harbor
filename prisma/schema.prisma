generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  clerkUserId     String    @unique
  email           String    @unique
  name            String?
  imageUrl        String?
  industry        String?    // Optional: for descriptive purposes only
  industryId      String?    // Foreign key to IndustryInsight.id
  industryInsight IndustryInsight? @relation(fields: [industryId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Profile fields
  bio           String?
  experience    Int?

  // Relations
  skills        String[]
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float
  questions     Json[]
  category      String
  improvementTip String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String
  jobDescription  String?
  companyName     String
  jobTitle        String
  status          String    @default("draft")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique
  users         User[]
  salaryRanges  Json[]
  growthRate    Float
  demandLevel   String
  topSkills     String[]
  marketOutlook String
  keyTrends     String[]
  recommendedSkills String[]
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime

  @@index([industry])
}
